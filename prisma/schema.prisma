generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model product_images {
  image_id          Int            @id @default(autoincrement())
  product_id        Int?
  image_path        String         @db.VarChar(255)
  image_description String?
  shoes_product     shoes_product? @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)
}

model shoes_brand {
  brand_id      Int             @id @default(autoincrement())
  brand_name    String          @db.VarChar(255)
  shoes_product shoes_product[]
}

model shoes_category {
  category_id   Int             @id @default(autoincrement())
  category_name String          @db.VarChar(255)
  shoes_product shoes_product[]
}

model shoes_color {
  color_id      Int             @id @default(autoincrement())
  color_name    String?         @db.VarChar(50)
  shoes_product shoes_product[]
}

model shoes_model {
  model_id      Int             @id @default(autoincrement())
  model_name    String          @db.VarChar(255)
  shoes_product shoes_product[]
}

model shoes_product {
  product_id          Int              @id @default(autoincrement())
  brand_id            Int?
  model_id            Int?
  category_id         Int?
  size_id             Int?
  product_price       Decimal          @db.Decimal(10, 2)
  product_currency    String           @db.VarChar(3)
  product_description String?
  color_id            Int?
  product_images      product_images[]
  shoes_color         shoes_color?     @relation(fields: [color_id], references: [color_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_shoes_product_color")
  shoes_brand         shoes_brand?     @relation(fields: [brand_id], references: [brand_id], onDelete: NoAction, onUpdate: NoAction)
  shoes_category      shoes_category?  @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction)
  shoes_model         shoes_model?     @relation(fields: [model_id], references: [model_id], onDelete: NoAction, onUpdate: NoAction)
  shoes_size          shoes_size?      @relation(fields: [size_id], references: [size_id], onDelete: NoAction, onUpdate: NoAction)
}

model shoes_size {
  size_id           Int             @id @default(autoincrement())
  size_name         String?         @db.VarChar(50)
  size_measure      Int?
  size_unit_measure String?         @db.VarChar(10)
  shoes_product     shoes_product[]
}

model user_sessions {
  session_id    Int       @id @default(autoincrement())
  user_id       Int?
  session_token String    @unique
  expires_at    DateTime? @db.Timestamp(6)
  users         users?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  user_id       Int             @id @default(autoincrement())
  email         String          @unique @db.VarChar(255)
  password_hash String
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  user_sessions user_sessions[]
}
